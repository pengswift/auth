// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	device.proto
	sdk.proto

It has these top-level messages:
	AuthRequest
	AuthResponse
	Device
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthRequest struct {
	Username string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Version  string  `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	SdkType  SDKType `protobuf:"varint,4,opt,name=sdkType,enum=auth.SDKType" json:"sdkType,omitempty"`
	Device   *Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}

func (m *AuthRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type AuthResponse struct {
	Userid       int32 `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	LastServerID int32 `protobuf:"varint,2,opt,name=lastServerID" json:"lastServerID,omitempty"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "auth.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "auth.AuthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AuthService service

type AuthServiceClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthServiceServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
